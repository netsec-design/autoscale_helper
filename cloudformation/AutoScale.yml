AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Network Template: This template creates a highly availble VPC architecture to represent the networking building blocks of AWS defined in Lab Module 1b

# This template creates:
#   VPC
#   Route tables for Public Network, APP Network, DB Network and MGMT Networks
#   Public Subnet, APP Subnet, DB Subnet and MGMT Subnet


######################
# Parameters section
######################

Parameters:

  PodName:
    Description: >-
      Name of an active CloudFormation stack that contains the networking
      resources, such as the VPC and subnet that will be used in this stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    Default: POD1

  VPCCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-16
    Description: CIDR block of VPC
    Type: String

  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2

######################
# Resources section
######################

Resources:

  ## VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VPCCIDR
      Tags:
       - Key: Name
         Value: !Sub ${PodName}-AutoScaleVPC
      
  
  ## Public Route Table

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
       - Key: Name
         Value: Public Route Table
  
  ## APP-A Route Table 
  
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
       - Key: Name
         Value: Private Route Table A

  ## APP-B Route Table 
  
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
       - Key: Name
         Value: Private Route Table B
    
 
  ## MGMT Route Table

  MGMTRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
       - Key: Name
         Value: MGMT Route Table

  ## TGW A Route Table

  TGWARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
       - Key: Name
         Value: TGW-A Route Table

  TGWBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
       - Key: Name
         Value: TGW-B Route Table

  
  ## Public-A Subnet
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
       - Key: Name
         Value: Public Subnet A
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region

  ## Public-B Subnet
  
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
       - Key: Name
         Value: Public Subnet B
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: AWS::Region


  ## PrivateA Subnet
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
       - Key: Name
         Value: Private Subnet A
      VpcId: !Ref VPC
      CidrBlock: !Select [ 10, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region


  ## PrivateB Subnet
  
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
       - Key: Name
         Value: Private Subnet B
      VpcId: !Ref VPC
      CidrBlock: !Select [ 20, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: AWS::Region


  ## MGMT Subnet A
  
  MGMTSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
       - Key: Name
         Value: MGMT Subnet A
      VpcId: !Ref VPC
      CidrBlock: !Select [ 100, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region

  ## MGMT Subnet B
  
  MGMTSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
       - Key: Name
         Value: MGMT Subnet B
      VpcId: !Ref VPC
      CidrBlock: !Select [ 200, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: AWS::Region

  ## TGW Subnet A
  
  TGWSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
       - Key: Name
         Value: TGW Subnet A
      VpcId: !Ref VPC
      CidrBlock: !Select [ 111, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: AWS::Region

  ## TGW Subnet B
  
  TGWSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
       - Key: Name
         Value: TGW Subnet B
      VpcId: !Ref VPC
      CidrBlock: !Select [ 222, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: AWS::Region

  ## Subnet associations - we need to associate the subnets with their respective route tables

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA  

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  MGMTSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MGMTSubnetA
      RouteTableId: !Ref MGMTRouteTable

  MGMTSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MGMTSubnetB
      RouteTableId: !Ref MGMTRouteTable

  TGWSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TGWSubnetA
      RouteTableId: !Ref TGWARouteTable

  TGWSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref TGWSubnetB
      RouteTableId: !Ref TGWBRouteTable


###############
#Internet Gateway and default routes
###############

 #Internet Gateway
  AutoScaleIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${PodName}-AutoScale-IGW

  # Internet Gateway VPC Attachment
  IGWVPCAttachment:        
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: AutoScaleIGW
    Properties: 
      InternetGatewayId: !Ref AutoScaleIGW
      VpcId: !Ref VPC
  
  DefaultRoutePublicSubnet:
    Type: AWS::EC2::Route
    DependsOn: IGWVPCAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AutoScaleIGW

  DefaultRouteMGMT:
    Type: AWS::EC2::Route
    DependsOn: IGWVPCAttachment
    Properties:
      RouteTableId: !Ref MGMTRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AutoScaleIGW


###############
#Jumpbox
###############

#Jumpbox Instance A
  JumpboxInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmazonLinuxAMIID
      KeyName: aws-cloudedge
      NetworkInterfaces:
        - GroupSet:
            - !Ref JumpBoxSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: 0
          DeleteOnTermination: true
          SubnetId: !Ref MGMTSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${PodName}-AutoScale-Jumpbox-A



  JumpDiskVolumeA:
    Type: AWS::EC2::Volume
    Properties:
      Size: 100
      AvailabilityZone: !GetAtt JumpboxInstanceA.AvailabilityZone
      Tags:
        - Key: Name
          Value: !Sub ${PodName}-AutoScale-Jump Data A
    DeletionPolicy: Snapshot

  JumpDiskMountPointA:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref JumpboxInstanceA
      VolumeId: !Ref JumpDiskVolumeA
      Device: /dev/sdh 

  #Security Group Jumphost
  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH ingress
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${PodName}-AutoScale-Management Security Group

######################
# Outputs section
######################

Outputs:
  
  PublicSubnetA:
    Description: The subnet ID to use for public web servers
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetIDA'

  PublicSubnetB:
    Description: The subnet ID to use for public web servers
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetIDB'

  PrivateSubnetA:
    Description: Private Subnet in Availability zone A
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetA'

  PrivateSubnetB:
    Description: Private Subnet in Availability zone B
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetB'

  MGMTSubnetA:
    Description: The subnet ID to use for Management 
    Value: !Ref MGMTSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-MGMTSubnetA'
  
  MGMTSubnetB:
    Description: The subnet ID to use for Management
    Value: !Ref MGMTSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-MGMTSubnetB'

  TGWSubnetA:
    Description: The subnet ID to use for TGW Peering
    Value: !Ref TGWSubnetA
    Export:
      Name: !Sub '${AWS::StackName}-TGWSubnetA'
  
  TGWSubnetB:
    Description: The subnet ID to use for TGW Peering
    Value: !Ref TGWSubnetB
    Export:
      Name: !Sub '${AWS::StackName}-TGWSubnetB'

  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'

  PublicRouteTable:
    Description: Public Route Table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-PublicRouteTable'  

  PrivateRouteTableA:
    Description: Private RouteTable A
    Value: !Ref PrivateRouteTableA
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTableA'  

  PrivateRouteTableB: 
    Description: Private RouteTable B
    Value: !Ref PrivateRouteTableB
    Export:
      Name: !Sub '${AWS::StackName}-PrivateRouteTableB'  

  TGWARouteTable:
    Description: TGW RouteTable A
    Value: !Ref TGWARouteTable
    Export:
      Name: !Sub '${AWS::StackName}-TGWARouteTable'  

  TGWBRouteTable:
    Description: TGW RouteTable B
    Value: !Ref TGWBRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-TGWBRouteTable'  

  MGMTRouteTable:
    Description: MGMT Route Table
    Value: !Ref MGMTRouteTable
    Export:
      Name: !Sub '${AWS::StackName}-MGMTRouteTable'  

  VPCCIDR:
    Description: VPC CIDR
    Value: !Ref VPCCIDR
    Export:
      Name: !Sub '${AWS::StackName}-VPCCIDR'  